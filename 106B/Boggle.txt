/*
 * CS 106B/X, Boggle
 * This is the core source-code made for
 * the Boggle assignment.
 *
 * This program is designed to follow the rules
 * of the game boggle and find words in a boggle board.
 * First the human plays and enters words that they think they find.
 * The program will figure out wether it's a valid word or not and
 * will find the remaining words through recursion
 *
 * author: Yuvraj Baweja and Luke Liang
 * version: 2019/07/20
 */

#include "bogglegui.h"
#include <string>
#include "grid.h"
#include "lexicon.h"
#include "set.h"
#include "strlib.h"
using namespace std;

// function prototypes
bool humanWordSearchHelp(Grid<char>&, string, int, int, Grid<bool>&);
int getScore(string);
void computerWordSearchHelp(Grid<char>&, Lexicon&, Set<string>&, Set<string>&, string, int, int, Grid<bool>&);

// searches the board to see if a huamn input word exists
bool humanWordSearch(Grid<char>& board, Lexicon& dictionary, string word) {
    // to ensure a valid input
    if (word.length() < BoggleGUI::MIN_WORD_LENGTH || !dictionary.contains(word)) {
        return false;
    }
    toUpperCase(word);
    BoggleGUI::clearHighlighting();

    // runs through the whole board
    for (int row = 0; row < board.numRows(); row++) {
        for (int col = 0; col < board.numCols(); col++) {

            // if first letter is found then recurse
            if (board[row][col] == word[0]) {
                Grid<bool> g(board.numRows(), board.numCols());

                // if found then add score and return true
                if(humanWordSearchHelp(board, word, row, col, g)) {
                    BoggleGUI::scorePointsHuman(getScore(word));
                    return true;
                }

            }
        }
    }
    // if everything fails, return false
    return false;
}

// recursion helper function that tries to find a human input word in the board
bool humanWordSearchHelp(Grid<char>& board, string word, int row, int col, Grid<bool>& g) {
    if (word == "") {
        return true;
    } else {
        for (int x = -1; x <= 1; x++) {
            for (int y = -1; y <= 1; y++) {
                if (board.inBounds(row+x, col+y) && board[row+x][col+y] == word[0] && !g[row+x][col+y]) {

                    // set highlight
                    BoggleGUI::setHighlighted(row+x, col+y, true);
                    g[row+x][col+y] = true;

                    // explore
                    if (humanWordSearchHelp(board, word.substr(1), row+x, col+y, g)) {
                        return true;
                    }

                    // backtrack the highlight
                    g[row+x][col+y] = false;
                    BoggleGUI::setHighlighted(row+x, col+y, false);
                }
            }
        }
        return false;
    }
}

// gets score based on word length
int getScore(string word) {
    int size = word.length();
    if (size <= 4) {
        return 1;
    } else if (size == 5) {
        return 2;
    } else if (size == 6) {
        return 3;
    } else if (size == 7){
        return 5;
    } else {
        return 11;
    }
}

// function that finds all possible words in a given board
Set<string> computerWordSearch(Grid<char>& board, Lexicon& dictionary, Set<string>& humanWords) {
    Set<string> words;

    // goes through every letter in the board
    for(int row = 0; row < board.numRows(); row++) {
        for (int col = 0; col < board.numCols(); col++) {
            string word;
            Grid<bool> g(board.numRows(), board.numCols());

            // choose
            g[row][col] = true;

            // explore
            computerWordSearchHelp(board, dictionary, humanWords, words, word + board[row][col], row, col, g);

            // unchoose
            g[row][col] = false;
        }
    }


    return words;
}

// helper function to find every word in the board
void computerWordSearchHelp(Grid<char>& board, Lexicon& dictionary, Set<string>& usedWords, Set<string>& words,
                            string word, int row, int col, Grid<bool>& g) {

    // check if a word is made
    if (!usedWords.contains(word) && word.length() >= 4 && dictionary.contains(word)) {
        BoggleGUI::scorePointsComputer(getScore(word));
        words.add(word);
        usedWords.add(word);
        computerWordSearchHelp(board, dictionary, usedWords, words, word, row, col, g);
    } else if (dictionary.containsPrefix(word)){     // so the algorithm is faster

        // checks the 3x3 around a particular square
        for (int x = -1; x <= 1; x++) {
            for (int y = -1; y <= 1; y++) {
                if (board.inBounds(row + x, col + y) && (x != 0 || y != 0) && !g[row+x][col+y]) {

                    // choose
                    g[row+x][col+y] = true;

                    // explore
                    computerWordSearchHelp(board, dictionary, usedWords, words,
                                           word + board[row + x][col + y], row + x, col + y, g);

                    // unchoose
                    g[row+x][col+y] = false;
                }
            }
        }
    }
}
